#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
This modules defines contact models for different tactile sensors.

"""

import numpy as np
import udom_common_msgs.msg


class ContactModel(object):
    """
    Basic class for a contact model. An object of a derived class should be able
    to compute at least the following:

    * force array: Array of forces, even if there is only one element, where each
        force element contains its linear and angular part and also specifies the
        point on which the force is applied. The array has a single reference frame,
        thus all points should be defined with respect to this frame.

    """
    def __init__(self):
        """
        Returns a contact model object.

        :return: Contact model.
        :rtype: contact_model.ContactModel

        """
        pass

    def force_array(self, contact_info):
        """
        Returns the linear (force) and angular (torque) components of the force
        computed based on the contact information, as well as the positions where
        they occur.

        :param contact_info: The contact information.
        :type contact_info: udom_perception_msgs.msg.ContactInfo

        :return: Force array computed from the contact information.
        :rtype: udom_common_msgs.msg.ForceArray

        """
        raise NotImplementedError


class BioTacSensor(ContactModel):
    """
    Basic class for a BioTac sensor contact model. An object of a derived class should
    be able to compute at least the following:

    * force array: Array of forces, even if there is only one element, where each
        force element contains its linear and angular part and also specifies the
        point on which the force is applied. The array has a single reference frame,
        thus all points should be defined with respect to this frame.

    """
    def __init__(self):
        """
        Returns a contact model object.

        :return: Contact model.
        :rtype: contact_model.ContactModel

        """
        super(BioTacSensor, self).__init__()

    def force_array(self, contact_info):
        """
        Returns the linear (force) and angular (torque) components of the force
        computed based on the contact information, as well as the positions where
        they occur.

        :param contact_info: The contact information.
        :type contact_info: udom_perception_msgs.msg.ContactInfo

        :return: Force array computed from the contact information.
        :rtype: udom_common_msgs.msg.ForceArray

        """
        raise NotImplementedError


class BioTacSimple(BioTacSensor):
    """
    Class representing a simple contact model of the BioTac sensor where only one
    force is computed for the contact point with the largest magnitude.

    """
    def force_array(self, contact_info, threshold=None):
        """
        Returns the linear (force) and angular (torque) components for the contact
        point with the largest magnitude. If a threshold is specified, it filters out
        residual forces that are below (absolutely) the threshold.

        :param contact_info: The contact information.
        :type contact_info: udom_perception_msgs.msg.ContactInfo

        :param threshold: Threshold to remove residual forces of the sensor (in Newtons).
        :type threshold: float

        :return: Wrenches generated by each contact.
        :rtype: udom_common_msgs.msg.ForceArray

        """
        force_array = udom_common_msgs.msg.ForceArray()

        if contact_info.wrenches:
            idx = np.argmax(
                [np.linalg.norm([ff.force.x, ff.force.y, ff.force.z])
                 for ff in contact_info.wrenches]
            )

            force_array.positions = [contact_info.contact_points[idx]]
            force_array.wrenches = [contact_info.wrenches[idx]]

        if threshold:
            f_x, f_y, f_z = (force_array.wrenches[0].force.x,
                             force_array.wrenches[0].force.y,
                             force_array.wrenches[0].force.z)
            if abs(f_x) >= threshold or abs(f_y) >= threshold or abs(f_z) >= threshold:
                return force_array
            else:
                force_array.wrenches[0].force.x = 0.0
                force_array.wrenches[0].force.y = 0.0
                force_array.wrenches[0].force.z = 0.0

        return force_array
